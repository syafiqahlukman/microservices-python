apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: rabbitmq
spec:
  serviceName: "not-applicable"
  selector:
    matchLabels:
      app: rabbitmq
  template:
    metadata:
      labels:
        app: rabbitmq
    spec:
      containers: #specify the container that gets spun up 
        - name: rabbitmq
          image: rabbitmq:3-management
          ports:
            - name: http
              protocol: TCP
              containerPort: 15672
            - name: amqp
              protocol: TCP
              containerPort: 5672
          envFrom:
            - configMapRef:
                name: rabbitmq-configmap
            - secretRef:
                name: rabbitmq-secret
          volumeMounts: #mount the storage volume to the container
            - mountPath: "/var/lib/rabbitmq" #configuring where in our container the storage volume should be mounted because this is where rabbitmq stores the queues
              name: rabbitmq-volume
      volumes: #configuration for the storage volume to be mounted to the container
        - name: rabbitmq-volume
          persistentVolumeClaim: #need to create a persistent volume claim to request storage from the storage class. and this configuration here is to call that persistent volume claim rabbitmq-pvc
            claimName: rabbitmq-pvc

#pvc is managed by applications that request specific amount of storage. the pvc is then bind to a pv that meets the request, ensuring that the storage is available to the application
#WIf no suitable pv exists, Kubernetes can automatically provision a PV that satisfies the claim